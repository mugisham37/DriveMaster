name: CI/CD Pipeline - Adaptive Learning Platform

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: adaptive-learning
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Detect changes to determine which services to build/test
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      auth-service: ${{ steps.changes.outputs.auth-service }}
      user-service: ${{ steps.changes.outputs.user-service }}
      content-service: ${{ steps.changes.outputs.content-service }}
      scheduler-service: ${{ steps.changes.outputs.scheduler-service }}
      ml-service: ${{ steps.changes.outputs.ml-service }}
      event-service: ${{ steps.changes.outputs.event-service }}
      notification-service: ${{ steps.changes.outputs.notification-service }}
      fraud-service: ${{ steps.changes.outputs.fraud-service }}
      infrastructure: ${{ steps.changes.outputs.infrastructure }}
      any-service: ${{ steps.changes.outputs.any-service }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          auth-service:
            - 'services/auth-service/**'
          user-service:
            - 'services/user-service/**'
          content-service:
            - 'services/content-service/**'
          scheduler-service:
            - 'services/scheduler-service/**'
          ml-service:
            - 'services/ml-service/**'
          event-service:
            - 'services/event-service/**'
          notification-service:
            - 'services/notification-service/**'
          fraud-service:
            - 'services/fraud-service/**'
          infrastructure:
            - 'infrastructure/**'
            - 'docker-compose.yml'
            - 'Makefile'
          any-service:
            - 'services/**'

  # Code quality and security checks
  code-quality:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any-service == 'true'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: go, javascript, python

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Test Go services
  test-go-services:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.user-service == 'true' || needs.detect-changes.outputs.scheduler-service == 'true' || needs.detect-changes.outputs.event-service == 'true'
    strategy:
      matrix:
        service: [user-service, scheduler-service, event-service]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('services/${{ matrix.service }}/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      working-directory: services/${{ matrix.service }}
      run: go mod download

    - name: Run tests
      working-directory: services/${{ matrix.service }}
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: services/${{ matrix.service }}/coverage.out
        flags: ${{ matrix.service }}

    - name: Run linting
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: services/${{ matrix.service }}

  # Test Node.js services
  test-nodejs-services:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.auth-service == 'true' || needs.detect-changes.outputs.content-service == 'true' || needs.detect-changes.outputs.notification-service == 'true'
    strategy:
      matrix:
        service: [auth-service, content-service, notification-service]
        node-version: [18, 20]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: services/${{ matrix.service }}/package-lock.json

    - name: Install dependencies
      working-directory: services/${{ matrix.service }}
      run: npm ci

    - name: Run linting
      working-directory: services/${{ matrix.service }}
      run: npm run lint

    - name: Run tests
      working-directory: services/${{ matrix.service }}
      run: npm run test:coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: services/${{ matrix.service }}/coverage/lcov.info
        flags: ${{ matrix.service }}

  # Test Python services
  test-python-services:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.ml-service == 'true' || needs.detect-changes.outputs.fraud-service == 'true'
    strategy:
      matrix:
        service: [ml-service, fraud-service]
        python-version: ['3.9', '3.10', '3.11']
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('services/${{ matrix.service }}/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: services/${{ matrix.service }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8 mypy

    - name: Run linting
      working-directory: services/${{ matrix.service }}
      run: |
        black --check .
        flake8 .
        mypy .

    - name: Run tests
      working-directory: services/${{ matrix.service }}
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: services/${{ matrix.service }}/coverage.xml
        flags: ${{ matrix.service }}

  # Build and push Docker images
  build-and-push:
    runs-on: ubuntu-latest
    needs: [detect-changes, test-go-services, test-nodejs-services, test-python-services]
    if: always() && (needs.test-go-services.result == 'success' || needs.test-go-services.result == 'skipped') && (needs.test-nodejs-services.result == 'success' || needs.test-nodejs-services.result == 'skipped') && (needs.test-python-services.result == 'success' || needs.test-python-services.result == 'skipped')
    strategy:
      matrix:
        service: [auth-service, user-service, content-service, scheduler-service, ml-service, event-service, notification-service, fraud-service]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Check if service changed
      id: check-changes
      run: |
        if [[ "${{ needs.detect-changes.outputs[matrix.service] }}" == "true" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "should_build=true" >> $GITHUB_OUTPUT
        else
          echo "should_build=false" >> $GITHUB_OUTPUT
        fi

    - name: Build and push Docker image
      if: steps.check-changes.outputs.should_build == 'true'
      uses: docker/build-push-action@v5
      with:
        context: services/${{ matrix.service }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Run Trivy vulnerability scanner on image
      if: steps.check-changes.outputs.should_build == 'true'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'

    - name: Upload Trivy scan results
      if: steps.check-changes.outputs.should_build == 'true'
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-image-results.sarif'

  # Integration tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: adaptive_learning_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Compose
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30

    - name: Run integration tests
      run: |
        docker-compose -f docker-compose.test.yml exec -T auth-service npm run test:integration
        docker-compose -f docker-compose.test.yml exec -T user-service go test -tags=integration ./...
        docker-compose -f docker-compose.test.yml exec -T scheduler-service go test -tags=integration ./...

    - name: Cleanup
      if: always()
      run: docker-compose -f docker-compose.test.yml down -v

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-push, integration-tests]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    steps:
    - uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config

    - name: Deploy to staging
      run: |
        cd infrastructure/k8s
        export NAMESPACE=adaptive-learning-staging
        export ENVIRONMENT=staging
        ./deploy.sh --helm
        
    - name: Run smoke tests
      run: |
        kubectl wait --for=condition=ready pod -l app=auth-service -n adaptive-learning-staging --timeout=300s
        kubectl wait --for=condition=ready pod -l app=user-service -n adaptive-learning-staging --timeout=300s
        kubectl wait --for=condition=ready pod -l app=scheduler-service -n adaptive-learning-staging --timeout=300s
        
        # Run basic health checks
        kubectl port-forward svc/auth-service 3000:3000 -n adaptive-learning-staging &
        sleep 10
        curl -f http://localhost:3000/health || exit 1

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: 'Staging deployment completed successfully! 🚀'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push, integration-tests]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    steps:
    - uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config

    - name: Deploy with canary strategy
      run: |
        cd infrastructure/k8s
        export NAMESPACE=adaptive-learning-prod
        export ENVIRONMENT=production
        
        # Deploy with 10% traffic to new version
        helm upgrade adaptive-learning ../helm/adaptive-learning \
          --namespace $NAMESPACE \
          --set canary.enabled=true \
          --set canary.weight=10 \
          --set image.tag=${{ github.sha }} \
          --wait --timeout=20m

    - name: Run production smoke tests
      run: |
        # Wait for canary deployment
        kubectl rollout status deployment/auth-service -n adaptive-learning-prod --timeout=600s
        kubectl rollout status deployment/user-service -n adaptive-learning-prod --timeout=600s
        kubectl rollout status deployment/scheduler-service -n adaptive-learning-prod --timeout=600s
        
        # Run comprehensive health checks
        ./scripts/production-health-check.sh

    - name: Monitor canary metrics
      run: |
        # Monitor error rates and response times for 10 minutes
        ./scripts/monitor-canary.sh
        
    - name: Promote canary to full deployment
      run: |
        # If metrics are good, promote to 100%
        helm upgrade adaptive-learning ../helm/adaptive-learning \
          --namespace adaptive-learning-prod \
          --set canary.enabled=false \
          --set image.tag=${{ github.sha }} \
          --wait --timeout=20m

    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, rolling back..."
        helm rollback adaptive-learning -n adaptive-learning-prod
        
    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#production-deployments'
        text: |
          Production deployment ${{ job.status }}! 
          Version: ${{ github.sha }}
          Branch: ${{ github.ref_name }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    steps:
    - uses: actions/checkout@v4

    - name: Set up k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run performance tests
      run: |
        cd tests/performance
        k6 run --out json=results.json load-test.js
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: tests/performance/results.json

    - name: Analyze performance results
      run: |
        cd tests/performance
        python analyze-results.py results.json > performance-report.md
        
    - name: Comment performance results
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('tests/performance/performance-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Performance Test Results\n\n${report}`
          });

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    steps:
    - uses: actions/checkout@v4

    - name: Run OWASP ZAP scan
      uses: zaproxy/action-full-scan@v0.7.0
      with:
        target: 'https://staging.adaptivelearning.com'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Upload ZAP scan results
      uses: actions/upload-artifact@v3
      with:
        name: zap-results
        path: report_html.html

  # Cleanup old images
  cleanup:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Delete old container images
      uses: actions/delete-package-versions@v4
      with:
        package-name: '${{ env.IMAGE_PREFIX }}-auth-service'
        package-type: 'container'
        min-versions-to-keep: 10
        delete-only-untagged-versions: true