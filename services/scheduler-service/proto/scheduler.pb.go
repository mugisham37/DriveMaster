// Code generated by protoc-gen-go. DO NOT EDIT.
// Simplified Protocol Buffer definitions for scheduler service

package proto

import (
	"google.golang.org/protobuf/types/known/timestamppb"
)

// SessionType enum
type SessionType int32

const (
	SessionType_PRACTICE  SessionType = 0
	SessionType_REVIEW    SessionType = 1
	SessionType_MOCK_TEST SessionType = 2
	SessionType_PLACEMENT SessionType = 3
)

// NextItemsRequest represents a request for next items
type NextItemsRequest struct {
	UserId       string              `json:"user_id,omitempty"`
	SessionId    string              `json:"session_id,omitempty"`
	SessionType  SessionType         `json:"session_type,omitempty"`
	Count        int32               `json:"count,omitempty"`
	Constraints  *SessionConstraints `json:"constraints,omitempty"`
	ExcludeItems []string            `json:"exclude_items,omitempty"`
}

func (x *NextItemsRequest) Reset()         { *x = NextItemsRequest{} }
func (x *NextItemsRequest) String() string { return "" }
func (*NextItemsRequest) ProtoMessage()    {}

func (x *NextItemsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *NextItemsRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *NextItemsRequest) GetSessionType() SessionType {
	if x != nil {
		return x.SessionType
	}
	return SessionType_PRACTICE
}

func (x *NextItemsRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *NextItemsRequest) GetConstraints() *SessionConstraints {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *NextItemsRequest) GetExcludeItems() []string {
	if x != nil {
		return x.ExcludeItems
	}
	return nil
}

// NextItemsResponse represents the response with recommended items
type NextItemsResponse struct {
	Items          []*RecommendedItem `json:"items,omitempty"`
	SessionContext *SessionContext    `json:"session_context,omitempty"`
	Strategy       string             `json:"strategy,omitempty"`
}

func (x *NextItemsResponse) Reset()         { *x = NextItemsResponse{} }
func (x *NextItemsResponse) String() string { return "" }
func (*NextItemsResponse) ProtoMessage()    {}

func (x *NextItemsResponse) GetItems() []*RecommendedItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *NextItemsResponse) GetSessionContext() *SessionContext {
	if x != nil {
		return x.SessionContext
	}
	return nil
}

func (x *NextItemsResponse) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

// RecommendedItem represents an item recommendation
type RecommendedItem struct {
	ItemId               string   `json:"item_id,omitempty"`
	Score                float64  `json:"score,omitempty"`
	Reason               string   `json:"reason,omitempty"`
	Topics               []string `json:"topics,omitempty"`
	Difficulty           float64  `json:"difficulty,omitempty"`
	PredictedCorrectness float64  `json:"predicted_correctness,omitempty"`
}

func (x *RecommendedItem) Reset()         { *x = RecommendedItem{} }
func (x *RecommendedItem) String() string { return "" }
func (*RecommendedItem) ProtoMessage()    {}

func (x *RecommendedItem) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *RecommendedItem) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RecommendedItem) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *RecommendedItem) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *RecommendedItem) GetDifficulty() float64 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *RecommendedItem) GetPredictedCorrectness() float64 {
	if x != nil {
		return x.PredictedCorrectness
	}
	return 0
}

// SessionConstraints defines session parameters
type SessionConstraints struct {
	MaxTimeMinutes        int32    `json:"max_time_minutes,omitempty"`
	MaxItems              int32    `json:"max_items,omitempty"`
	RequiredTopics        []string `json:"required_topics,omitempty"`
	ExcludedTopics        []string `json:"excluded_topics,omitempty"`
	MinDifficulty         float64  `json:"min_difficulty,omitempty"`
	MaxDifficulty         float64  `json:"max_difficulty,omitempty"`
	EnforceInterleaving   bool     `json:"enforce_interleaving,omitempty"`
	MinTimeBetweenRepeats int32    `json:"min_time_between_repeats,omitempty"`
}

func (x *SessionConstraints) Reset()         { *x = SessionConstraints{} }
func (x *SessionConstraints) String() string { return "" }
func (*SessionConstraints) ProtoMessage()    {}

// SessionContext provides session information
type SessionContext struct {
	SessionId         string                 `json:"session_id,omitempty"`
	SessionType       SessionType            `json:"session_type,omitempty"`
	ItemsCompleted    int32                  `json:"items_completed,omitempty"`
	CorrectCount      int32                  `json:"correct_count,omitempty"`
	ElapsedTimeMs     int64                  `json:"elapsed_time_ms,omitempty"`
	TopicsPracticed   []string               `json:"topics_practiced,omitempty"`
	AverageDifficulty float64                `json:"average_difficulty,omitempty"`
	StartedAt         *timestamppb.Timestamp `json:"started_at,omitempty"`
}

func (x *SessionContext) Reset()         { *x = SessionContext{} }
func (x *SessionContext) String() string { return "" }
func (*SessionContext) ProtoMessage()    {}

// PlacementRequest for placement testing
type PlacementRequest struct {
	UserId      string   `json:"user_id,omitempty"`
	CountryCode string   `json:"country_code,omitempty"`
	Topics      []string `json:"topics,omitempty"`
	MaxItems    int32    `json:"max_items,omitempty"`
}

func (x *PlacementRequest) Reset()         { *x = PlacementRequest{} }
func (x *PlacementRequest) String() string { return "" }
func (*PlacementRequest) ProtoMessage()    {}

func (x *PlacementRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PlacementRequest) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *PlacementRequest) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *PlacementRequest) GetMaxItems() int32 {
	if x != nil {
		return x.MaxItems
	}
	return 0
}

// PlacementResponse with placement items
type PlacementResponse struct {
	Items              []*PlacementItem `json:"items,omitempty"`
	PlacementSessionId string           `json:"placement_session_id,omitempty"`
}

func (x *PlacementResponse) Reset()         { *x = PlacementResponse{} }
func (x *PlacementResponse) String() string { return "" }
func (*PlacementResponse) ProtoMessage()    {}

func (x *PlacementResponse) GetItems() []*PlacementItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *PlacementResponse) GetPlacementSessionId() string {
	if x != nil {
		return x.PlacementSessionId
	}
	return ""
}

// PlacementItem for placement testing
type PlacementItem struct {
	ItemId         string   `json:"item_id,omitempty"`
	Topics         []string `json:"topics,omitempty"`
	Difficulty     float64  `json:"difficulty,omitempty"`
	Discrimination float64  `json:"discrimination,omitempty"`
}

func (x *PlacementItem) Reset()         { *x = PlacementItem{} }
func (x *PlacementItem) String() string { return "" }
func (*PlacementItem) ProtoMessage()    {}

func (x *PlacementItem) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *PlacementItem) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *PlacementItem) GetDifficulty() float64 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *PlacementItem) GetDiscrimination() float64 {
	if x != nil {
		return x.Discrimination
	}
	return 0
}

// AttemptRequest for recording attempts
type AttemptRequest struct {
	UserId          string                 `json:"user_id,omitempty"`
	ItemId          string                 `json:"item_id,omitempty"`
	SessionId       string                 `json:"session_id,omitempty"`
	ClientAttemptId string                 `json:"client_attempt_id,omitempty"`
	SelectedAnswer  string                 `json:"selected_answer,omitempty"`
	Correct         bool                   `json:"correct,omitempty"`
	Quality         int32                  `json:"quality,omitempty"`
	Confidence      int32                  `json:"confidence,omitempty"`
	TimeTakenMs     int64                  `json:"time_taken_ms,omitempty"`
	HintsUsed       int32                  `json:"hints_used,omitempty"`
	DeviceType      string                 `json:"device_type,omitempty"`
	AppVersion      string                 `json:"app_version,omitempty"`
	Timestamp       *timestamppb.Timestamp `json:"timestamp,omitempty"`
}

func (x *AttemptRequest) Reset()         { *x = AttemptRequest{} }
func (x *AttemptRequest) String() string { return "" }
func (*AttemptRequest) ProtoMessage()    {}

func (x *AttemptRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AttemptRequest) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *AttemptRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *AttemptRequest) GetClientAttemptId() string {
	if x != nil {
		return x.ClientAttemptId
	}
	return ""
}

func (x *AttemptRequest) GetCorrect() bool {
	if x != nil {
		return x.Correct
	}
	return false
}

// AttemptResponse after processing attempt
type AttemptResponse struct {
	Success     bool             `json:"success,omitempty"`
	Message     string           `json:"message,omitempty"`
	StateUpdate *UserStateUpdate `json:"state_update,omitempty"`
}

func (x *AttemptResponse) Reset()         { *x = AttemptResponse{} }
func (x *AttemptResponse) String() string { return "" }
func (*AttemptResponse) ProtoMessage()    {}

func (x *AttemptResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AttemptResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AttemptResponse) GetStateUpdate() *UserStateUpdate {
	if x != nil {
		return x.StateUpdate
	}
	return nil
}

// UserStateUpdate represents state changes
type UserStateUpdate struct {
	MasteryChanges map[string]float64 `json:"mastery_changes,omitempty"`
	AbilityChanges map[string]float64 `json:"ability_changes,omitempty"`
	Sm2Update      *SM2StateUpdate    `json:"sm2_update,omitempty"`
}

func (x *UserStateUpdate) Reset()         { *x = UserStateUpdate{} }
func (x *UserStateUpdate) String() string { return "" }
func (*UserStateUpdate) ProtoMessage()    {}

func (x *UserStateUpdate) GetMasteryChanges() map[string]float64 {
	if x != nil {
		return x.MasteryChanges
	}
	return nil
}

func (x *UserStateUpdate) GetAbilityChanges() map[string]float64 {
	if x != nil {
		return x.AbilityChanges
	}
	return nil
}

func (x *UserStateUpdate) GetSm2Update() *SM2StateUpdate {
	if x != nil {
		return x.Sm2Update
	}
	return nil
}

// SM2StateUpdate for SM-2 algorithm updates
type SM2StateUpdate struct {
	EasinessFactor float64                `json:"easiness_factor,omitempty"`
	Interval       int32                  `json:"interval,omitempty"`
	Repetition     int32                  `json:"repetition,omitempty"`
	NextDue        *timestamppb.Timestamp `json:"next_due,omitempty"`
}

func (x *SM2StateUpdate) Reset()         { *x = SM2StateUpdate{} }
func (x *SM2StateUpdate) String() string { return "" }
func (*SM2StateUpdate) ProtoMessage()    {}

func (x *SM2StateUpdate) GetEasinessFactor() float64 {
	if x != nil {
		return x.EasinessFactor
	}
	return 0
}

func (x *SM2StateUpdate) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *SM2StateUpdate) GetRepetition() int32 {
	if x != nil {
		return x.Repetition
	}
	return 0
}

func (x *SM2StateUpdate) GetNextDue() *timestamppb.Timestamp {
	if x != nil {
		return x.NextDue
	}
	return nil
}

// Additional message types with minimal implementation
type InitializeUserRequest struct {
	UserId           string            `json:"user_id,omitempty"`
	CountryCode      string            `json:"country_code,omitempty"`
	PlacementResults *PlacementResults `json:"placement_results,omitempty"`
}

func (x *InitializeUserRequest) Reset()         { *x = InitializeUserRequest{} }
func (x *InitializeUserRequest) String() string { return "" }
func (*InitializeUserRequest) ProtoMessage()    {}

func (x *InitializeUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *InitializeUserRequest) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *InitializeUserRequest) GetPlacementResults() *PlacementResults {
	if x != nil {
		return x.PlacementResults
	}
	return nil
}

type InitializeUserResponse struct {
	Success      bool                `json:"success,omitempty"`
	Message      string              `json:"message,omitempty"`
	InitialState *UserSchedulerState `json:"initial_state,omitempty"`
}

func (x *InitializeUserResponse) Reset()         { *x = InitializeUserResponse{} }
func (x *InitializeUserResponse) String() string { return "" }
func (*InitializeUserResponse) ProtoMessage()    {}

func (x *InitializeUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *InitializeUserResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *InitializeUserResponse) GetInitialState() *UserSchedulerState {
	if x != nil {
		return x.InitialState
	}
	return nil
}

type PlacementResults struct {
	TopicAbilities  map[string]float64 `json:"topic_abilities,omitempty"`
	TopicConfidence map[string]float64 `json:"topic_confidence,omitempty"`
	TotalAttempts   int32              `json:"total_attempts,omitempty"`
	OverallAbility  float64            `json:"overall_ability,omitempty"`
}

func (x *PlacementResults) Reset()         { *x = PlacementResults{} }
func (x *PlacementResults) String() string { return "" }
func (*PlacementResults) ProtoMessage()    {}

type GetUserStateRequest struct {
	UserId string `json:"user_id,omitempty"`
}

func (x *GetUserStateRequest) Reset()         { *x = GetUserStateRequest{} }
func (x *GetUserStateRequest) String() string { return "" }
func (*GetUserStateRequest) ProtoMessage()    {}

func (x *GetUserStateRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetUserStateResponse struct {
	State *UserSchedulerState `json:"state,omitempty"`
}

func (x *GetUserStateResponse) Reset()         { *x = GetUserStateResponse{} }
func (x *GetUserStateResponse) String() string { return "" }
func (*GetUserStateResponse) ProtoMessage()    {}

func (x *GetUserStateResponse) GetState() *UserSchedulerState {
	if x != nil {
		return x.State
	}
	return nil
}

type UserSchedulerState struct {
	UserId            string                 `json:"user_id,omitempty"`
	AbilityVector     map[string]float64     `json:"ability_vector,omitempty"`
	AbilityConfidence map[string]float64     `json:"ability_confidence,omitempty"`
	Sm2States         map[string]*SM2State   `json:"sm2_states,omitempty"`
	BktStates         map[string]*BKTState   `json:"bkt_states,omitempty"`
	BanditState       *BanditState           `json:"bandit_state,omitempty"`
	CurrentSessionId  string                 `json:"current_session_id,omitempty"`
	LastSessionEnd    *timestamppb.Timestamp `json:"last_session_end,omitempty"`
	ConsecutiveDays   int32                  `json:"consecutive_days,omitempty"`
	TotalStudyTimeMs  int64                  `json:"total_study_time_ms,omitempty"`
	Version           int32                  `json:"version,omitempty"`
	LastUpdated       *timestamppb.Timestamp `json:"last_updated,omitempty"`
}

func (x *UserSchedulerState) Reset()         { *x = UserSchedulerState{} }
func (x *UserSchedulerState) String() string { return "" }
func (*UserSchedulerState) ProtoMessage()    {}

func (x *UserSchedulerState) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserSchedulerState) GetAbilityVector() map[string]float64 {
	if x != nil {
		return x.AbilityVector
	}
	return nil
}

func (x *UserSchedulerState) GetAbilityConfidence() map[string]float64 {
	if x != nil {
		return x.AbilityConfidence
	}
	return nil
}

func (x *UserSchedulerState) GetSm2States() map[string]*SM2State {
	if x != nil {
		return x.Sm2States
	}
	return nil
}

func (x *UserSchedulerState) GetBktStates() map[string]*BKTState {
	if x != nil {
		return x.BktStates
	}
	return nil
}

func (x *UserSchedulerState) GetBanditState() *BanditState {
	if x != nil {
		return x.BanditState
	}
	return nil
}

func (x *UserSchedulerState) GetCurrentSessionId() string {
	if x != nil {
		return x.CurrentSessionId
	}
	return ""
}

func (x *UserSchedulerState) GetLastSessionEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSessionEnd
	}
	return nil
}

func (x *UserSchedulerState) GetConsecutiveDays() int32 {
	if x != nil {
		return x.ConsecutiveDays
	}
	return 0
}

func (x *UserSchedulerState) GetTotalStudyTimeMs() int64 {
	if x != nil {
		return x.TotalStudyTimeMs
	}
	return 0
}

func (x *UserSchedulerState) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *UserSchedulerState) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

type SM2State struct {
	EasinessFactor float64                `json:"easiness_factor,omitempty"`
	Interval       int32                  `json:"interval,omitempty"`
	Repetition     int32                  `json:"repetition,omitempty"`
	NextDue        *timestamppb.Timestamp `json:"next_due,omitempty"`
	LastReviewed   *timestamppb.Timestamp `json:"last_reviewed,omitempty"`
}

func (x *SM2State) Reset()         { *x = SM2State{} }
func (x *SM2State) String() string { return "" }
func (*SM2State) ProtoMessage()    {}

type BKTState struct {
	ProbKnowledge float64 `json:"prob_knowledge,omitempty"`
	ProbGuess     float64 `json:"prob_guess,omitempty"`
	ProbSlip      float64 `json:"prob_slip,omitempty"`
	ProbLearn     float64 `json:"prob_learn,omitempty"`
	AttemptsCount int32   `json:"attempts_count,omitempty"`
	CorrectCount  int32   `json:"correct_count,omitempty"`
}

func (x *BKTState) Reset()         { *x = BKTState{} }
func (x *BKTState) String() string { return "" }
func (*BKTState) ProtoMessage()    {}

type BanditState struct {
	StrategyWeights map[string]float64 `json:"strategy_weights,omitempty"`
	StrategyCounts  map[string]int32   `json:"strategy_counts,omitempty"`
	StrategyRewards map[string]float64 `json:"strategy_rewards,omitempty"`
	ExplorationRate float64            `json:"exploration_rate,omitempty"`
}

func (x *BanditState) Reset()         { *x = BanditState{} }
func (x *BanditState) String() string { return "" }
func (*BanditState) ProtoMessage()    {}

func (x *BanditState) GetStrategyWeights() map[string]float64 {
	if x != nil {
		return x.StrategyWeights
	}
	return nil
}

func (x *BanditState) GetStrategyCounts() map[string]int32 {
	if x != nil {
		return x.StrategyCounts
	}
	return nil
}

func (x *BanditState) GetStrategyRewards() map[string]float64 {
	if x != nil {
		return x.StrategyRewards
	}
	return nil
}

func (x *BanditState) GetExplorationRate() float64 {
	if x != nil {
		return x.ExplorationRate
	}
	return 0
}

type GetItemDifficultyRequest struct {
	ItemId string `json:"item_id,omitempty"`
}

func (x *GetItemDifficultyRequest) Reset()         { *x = GetItemDifficultyRequest{} }
func (x *GetItemDifficultyRequest) String() string { return "" }
func (*GetItemDifficultyRequest) ProtoMessage()    {}

func (x *GetItemDifficultyRequest) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

type GetItemDifficultyResponse struct {
	Difficulty     float64 `json:"difficulty,omitempty"`
	Discrimination float64 `json:"discrimination,omitempty"`
	Guessing       float64 `json:"guessing,omitempty"`
	AttemptsCount  int32   `json:"attempts_count,omitempty"`
}

func (x *GetItemDifficultyResponse) Reset()         { *x = GetItemDifficultyResponse{} }
func (x *GetItemDifficultyResponse) String() string { return "" }
func (*GetItemDifficultyResponse) ProtoMessage()    {}

func (x *GetItemDifficultyResponse) GetDifficulty() float64 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *GetItemDifficultyResponse) GetDiscrimination() float64 {
	if x != nil {
		return x.Discrimination
	}
	return 0
}

func (x *GetItemDifficultyResponse) GetGuessing() float64 {
	if x != nil {
		return x.Guessing
	}
	return 0
}

func (x *GetItemDifficultyResponse) GetAttemptsCount() int32 {
	if x != nil {
		return x.AttemptsCount
	}
	return 0
}

type GetTopicMasteryRequest struct {
	UserId string `json:"user_id,omitempty"`
	Topic  string `json:"topic,omitempty"`
}

func (x *GetTopicMasteryRequest) Reset()         { *x = GetTopicMasteryRequest{} }
func (x *GetTopicMasteryRequest) String() string { return "" }
func (*GetTopicMasteryRequest) ProtoMessage()    {}

func (x *GetTopicMasteryRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetTopicMasteryRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

type GetTopicMasteryResponse struct {
	Mastery       float64                `json:"mastery,omitempty"`
	Confidence    float64                `json:"confidence,omitempty"`
	PracticeCount int32                  `json:"practice_count,omitempty"`
	LastPracticed *timestamppb.Timestamp `json:"last_practiced,omitempty"`
}

func (x *GetTopicMasteryResponse) Reset()         { *x = GetTopicMasteryResponse{} }
func (x *GetTopicMasteryResponse) String() string { return "" }
func (*GetTopicMasteryResponse) ProtoMessage()    {}

func (x *GetTopicMasteryResponse) GetMastery() float64 {
	if x != nil {
		return x.Mastery
	}
	return 0
}

func (x *GetTopicMasteryResponse) GetConfidence() float64 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *GetTopicMasteryResponse) GetPracticeCount() int32 {
	if x != nil {
		return x.PracticeCount
	}
	return 0
}

func (x *GetTopicMasteryResponse) GetLastPracticed() *timestamppb.Timestamp {
	if x != nil {
		return x.LastPracticed
	}
	return nil
}

type HealthRequest struct{}

func (x *HealthRequest) Reset()         { *x = HealthRequest{} }
func (x *HealthRequest) String() string { return "" }
func (*HealthRequest) ProtoMessage()    {}

type HealthResponse struct {
	Status    string                 `json:"status,omitempty"`
	Checks    map[string]string      `json:"checks,omitempty"`
	Timestamp *timestamppb.Timestamp `json:"timestamp,omitempty"`
}

func (x *HealthResponse) Reset()         { *x = HealthResponse{} }
func (x *HealthResponse) String() string { return "" }
func (*HealthResponse) ProtoMessage()    {}

func (x *HealthResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HealthResponse) GetChecks() map[string]string {
	if x != nil {
		return x.Checks
	}
	return nil
}

func (x *HealthResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}
