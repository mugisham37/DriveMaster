syntax = "proto3";

package scheduler;

option go_package = "scheduler-service/proto";

import "google/protobuf/timestamp.proto";

// Scheduler service definition
service SchedulerService {
  // Get next items for a user session
  rpc GetNextItems(NextItemsRequest) returns (NextItemsResponse);
  
  // Get placement test items for new users
  rpc GetPlacementItems(PlacementRequest) returns (PlacementResponse);
  
  // Record an attempt and update user state
  rpc RecordAttempt(AttemptRequest) returns (AttemptResponse);
  
  // Initialize a new user's scheduler state
  rpc InitializeUser(InitializeUserRequest) returns (InitializeUserResponse);
  
  // Get user's current scheduler state
  rpc GetUserState(GetUserStateRequest) returns (GetUserStateResponse);
  
  // Get item difficulty parameters
  rpc GetItemDifficulty(GetItemDifficultyRequest) returns (GetItemDifficultyResponse);
  
  // Get topic mastery for a user
  rpc GetTopicMastery(GetTopicMasteryRequest) returns (GetTopicMasteryResponse);
  
  // Contextual bandit methods for strategy selection
  rpc SelectSessionStrategy(SelectSessionStrategyRequest) returns (SelectSessionStrategyResponse);
  
  // Update session reward for bandit learning
  rpc UpdateSessionReward(UpdateSessionRewardRequest) returns (UpdateSessionRewardResponse);
  
  // Get bandit performance metrics
  rpc GetBanditMetrics(GetBanditMetricsRequest) returns (GetBanditMetricsResponse);
  
  // Get available session strategies
  rpc GetAvailableStrategies(GetAvailableStrategiesRequest) returns (GetAvailableStrategiesResponse);
  
  // Onboarding methods
  rpc InitializeOnboarding(InitializeOnboardingRequest) returns (InitializeOnboardingResponse);
  rpc UpdateOnboardingPreferences(UpdateOnboardingPreferencesRequest) returns (UpdateOnboardingPreferencesResponse);
  rpc StartPlacementTest(StartPlacementTestRequest) returns (StartPlacementTestResponse);
  rpc CompletePlacementTest(CompletePlacementTestRequest) returns (CompletePlacementTestResponse);
  rpc SkipPlacementTest(SkipPlacementTestRequest) returns (SkipPlacementTestResponse);
  rpc CompleteOnboarding(CompleteOnboardingRequest) returns (CompleteOnboardingResponse);
  rpc GetOnboardingState(GetOnboardingStateRequest) returns (GetOnboardingStateResponse);
  rpc GetLearningPath(GetLearningPathRequest) returns (GetLearningPathResponse);
  
  // Health check
  rpc Health(HealthRequest) returns (HealthResponse);
}

// Request/Response messages for GetNextItems
message NextItemsRequest {
  string user_id = 1;
  string session_id = 2;
  SessionType session_type = 3;
  int32 count = 4;
  SessionConstraints constraints = 5;
  repeated string exclude_items = 6;
}

message NextItemsResponse {
  repeated RecommendedItem items = 1;
  SessionContext session_context = 2;
  string strategy = 3;
}

message RecommendedItem {
  string item_id = 1;
  double score = 2;
  string reason = 3;
  repeated string topics = 4;
  double difficulty = 5;
  double predicted_correctness = 6;
}

// Request/Response messages for GetPlacementItems
message PlacementRequest {
  string user_id = 1;
  string country_code = 2;
  repeated string topics = 3;
  int32 max_items = 4;
}

message PlacementResponse {
  repeated PlacementItem items = 1;
  string placement_session_id = 2;
}

message PlacementItem {
  string item_id = 1;
  repeated string topics = 2;
  double difficulty = 3;
  double discrimination = 4;
}

// Request/Response messages for RecordAttempt
message AttemptRequest {
  string user_id = 1;
  string item_id = 2;
  string session_id = 3;
  string client_attempt_id = 4;
  
  // Response data
  string selected_answer = 5;
  bool correct = 6;
  int32 quality = 7; // 0-5 for SM-2
  int32 confidence = 8; // 1-5 user confidence
  int64 time_taken_ms = 9;
  int32 hints_used = 10;
  
  // Context
  string device_type = 11;
  string app_version = 12;
  google.protobuf.Timestamp timestamp = 13;
}

message AttemptResponse {
  bool success = 1;
  string message = 2;
  UserStateUpdate state_update = 3;
}

message UserStateUpdate {
  map<string, double> mastery_changes = 1;
  map<string, double> ability_changes = 2;
  SM2StateUpdate sm2_update = 3;
}

message SM2StateUpdate {
  double easiness_factor = 1;
  int32 interval = 2;
  int32 repetition = 3;
  google.protobuf.Timestamp next_due = 4;
}

// Request/Response messages for InitializeUser
message InitializeUserRequest {
  string user_id = 1;
  string country_code = 2;
  PlacementResults placement_results = 3;
}

message InitializeUserResponse {
  bool success = 1;
  string message = 2;
  UserSchedulerState initial_state = 3;
}

message PlacementResults {
  map<string, double> topic_abilities = 1;
  map<string, double> topic_confidence = 2;
  int32 total_attempts = 3;
  double overall_ability = 4;
}

// Request/Response messages for GetUserState
message GetUserStateRequest {
  string user_id = 1;
}

message GetUserStateResponse {
  UserSchedulerState state = 1;
}

message UserSchedulerState {
  string user_id = 1;
  map<string, double> ability_vector = 2;
  map<string, double> ability_confidence = 3;
  map<string, SM2State> sm2_states = 4;
  map<string, BKTState> bkt_states = 5;
  BanditState bandit_state = 6;
  string current_session_id = 7;
  google.protobuf.Timestamp last_session_end = 8;
  int32 consecutive_days = 9;
  int64 total_study_time_ms = 10;
  int32 version = 11;
  google.protobuf.Timestamp last_updated = 12;
}

// Algorithm state messages
message SM2State {
  double easiness_factor = 1;
  int32 interval = 2;
  int32 repetition = 3;
  google.protobuf.Timestamp next_due = 4;
  google.protobuf.Timestamp last_reviewed = 5;
}

message BKTState {
  double prob_knowledge = 1;
  double prob_guess = 2;
  double prob_slip = 3;
  double prob_learn = 4;
  int32 attempts_count = 5;
  int32 correct_count = 6;
}

message BanditState {
  map<string, double> strategy_weights = 1;
  map<string, int32> strategy_counts = 2;
  map<string, double> strategy_rewards = 3;
  double exploration_rate = 4;
}

// Request/Response messages for GetItemDifficulty
message GetItemDifficultyRequest {
  string item_id = 1;
}

message GetItemDifficultyResponse {
  double difficulty = 1;
  double discrimination = 2;
  double guessing = 3;
  int32 attempts_count = 4;
}

// Request/Response messages for GetTopicMastery
message GetTopicMasteryRequest {
  string user_id = 1;
  string topic = 2;
}

message GetTopicMasteryResponse {
  double mastery = 1;
  double confidence = 2;
  int32 practice_count = 3;
  google.protobuf.Timestamp last_practiced = 4;
}

// Health check messages
message HealthRequest {}

message HealthResponse {
  string status = 1;
  map<string, string> checks = 2;
  google.protobuf.Timestamp timestamp = 3;
}

// Supporting types
enum SessionType {
  PRACTICE = 0;
  REVIEW = 1;
  MOCK_TEST = 2;
  PLACEMENT = 3;
}

message SessionConstraints {
  int32 max_time_minutes = 1;
  int32 max_items = 2;
  repeated string required_topics = 3;
  repeated string excluded_topics = 4;
  double min_difficulty = 5;
  double max_difficulty = 6;
  bool enforce_interleaving = 7;
  int32 min_time_between_repeats = 8;
}

message SessionContext {
  string session_id = 1;
  SessionType session_type = 2;
  int32 items_completed = 3;
  int32 correct_count = 4;
  int64 elapsed_time_ms = 5;
  repeated string topics_practiced = 6;
  double average_difficulty = 7;
  google.protobuf.Timestamp started_at = 8;
}

// Contextual bandit messages
message SelectSessionStrategyRequest {
  string user_id = 1;
  
  // Session context
  int32 session_number = 2;
  int32 available_time = 3;
  double recent_accuracy = 4;
  double recent_difficulty = 5;
  
  // Learning state
  int32 due_items_count = 6;
  int32 overdue_items_count = 7;
  int32 new_items_count = 8;
  double mastery_gap_sum = 9;
  double urgency_score = 10;
  
  // Performance indicators
  double recent_engagement = 11;
  double recent_retention = 12;
  double recent_progress = 13;
  double predicted_fatigue = 14;
  double motivation_level = 15;
}

message SelectSessionStrategyResponse {
  SessionStrategy strategy = 1;
  BanditSelection selection = 2;
}

message SessionStrategy {
  string name = 1;
  string description = 2;
  int32 min_duration = 3;
  int32 max_duration = 4;
  double difficulty = 5;
  double variety = 6;
  double urgency = 7;
  double mastery = 8;
}

message BanditSelection {
  string strategy = 1;
  double confidence = 2;
  double expected_reward = 3;
  double exploration_bonus = 4;
  string reason = 5;
  google.protobuf.Timestamp timestamp = 6;
}

message UpdateSessionRewardRequest {
  string user_id = 1;
  string session_id = 2;
  string strategy = 3;
  double reward = 4;
  SessionPerformanceMetrics session_metrics = 5;
}

message UpdateSessionRewardResponse {
  bool success = 1;
  string message = 2;
}

message SessionPerformanceMetrics {
  double accuracy = 1;
  double engagement_score = 2;
  double efficiency_score = 3;
  double completion_rate = 4;
  double objectives_achieved = 5;
  double fatigue_level = 6;
  int32 time_spent = 7;
  int32 items_completed = 8;
  double mastery_improvement = 9;
  double retention_rate = 10;
}

message GetBanditMetricsRequest {}

message GetBanditMetricsResponse {
  map<string, string> metrics = 1;
}

message GetAvailableStrategiesRequest {}

message GetAvailableStrategiesResponse {
  repeated SessionStrategy strategies = 1;
}

// Onboarding messages
message InitializeOnboardingRequest {
  string user_id = 1;
  string country_code = 2;
}

message InitializeOnboardingResponse {
  bool success = 1;
  string message = 2;
  OnboardingState onboarding_state = 3;
}

message UpdateOnboardingPreferencesRequest {
  string user_id = 1;
  UserPreferences preferences = 2;
}

message UpdateOnboardingPreferencesResponse {
  bool success = 1;
  string message = 2;
}

message StartPlacementTestRequest {
  string user_id = 1;
}

message StartPlacementTestResponse {
  bool success = 1;
  string message = 2;
  PlacementTestState placement_test = 3;
}

message CompletePlacementTestRequest {
  string user_id = 1;
  string session_id = 2;
  PlacementTestResults results = 3;
}

message CompletePlacementTestResponse {
  bool success = 1;
  string message = 2;
  LearningPath learning_path = 3;
}

message SkipPlacementTestRequest {
  string user_id = 1;
}

message SkipPlacementTestResponse {
  bool success = 1;
  string message = 2;
  LearningPath learning_path = 3;
}

message CompleteOnboardingRequest {
  string user_id = 1;
  int32 satisfaction = 2;
  string feedback = 3;
}

message CompleteOnboardingResponse {
  bool success = 1;
  string message = 2;
}

message GetOnboardingStateRequest {
  string user_id = 1;
}

message GetOnboardingStateResponse {
  OnboardingState onboarding_state = 1;
}

message GetLearningPathRequest {
  string user_id = 1;
}

message GetLearningPathResponse {
  LearningPath learning_path = 1;
}

// Onboarding data structures
message OnboardingState {
  string user_id = 1;
  string country_code = 2;
  string stage = 3;
  OnboardingProgress progress = 4;
  UserPreferences preferences = 5;
  PlacementTestState placement_test = 6;
  LearningPath learning_path = 7;
  OnboardingAnalytics analytics = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
  google.protobuf.Timestamp completed_at = 11;
}

message OnboardingProgress {
  string current_stage = 1;
  repeated string completed_stages = 2;
  int32 total_stages = 3;
  double percent_complete = 4;
  int32 estimated_time_remaining_minutes = 5;
}

message UserPreferences {
  string study_goal = 1;
  int32 available_time_minutes = 2;
  string preferred_difficulty = 3;
  repeated string focus_areas = 4;
  string learning_style = 5;
  repeated string notification_times = 6;
  map<string, bool> weekly_schedule = 7;
}

message PlacementTestState {
  string session_id = 1;
  string status = 2;
  int32 items_completed = 3;
  int32 total_items = 4;
  double current_ability = 5;
  double confidence = 6;
  map<string, double> topic_abilities = 7;
  PlacementTestResults results = 8;
  google.protobuf.Timestamp started_at = 9;
  google.protobuf.Timestamp completed_at = 10;
}

message PlacementTestResults {
  string user_id = 1;
  string session_id = 2;
  map<string, double> topic_abilities = 3;
  map<string, double> topic_confidence = 4;
  double overall_ability = 5;
  double overall_confidence = 6;
  int32 items_administered = 7;
  int32 correct_responses = 8;
  int32 total_time_ms = 9;
  double final_se = 10;
  string recommended_level = 11;
  repeated string strength_areas = 12;
  repeated string weakness_areas = 13;
  string stopping_reason = 14;
}

message LearningPath {
  string path_id = 1;
  string recommended_level = 2;
  repeated TopicRecommendation focus_topics = 3;
  StudyPlan study_plan = 4;
  repeated LearningMilestone milestones = 5;
  int32 estimated_duration_days = 6;
  google.protobuf.Timestamp created_at = 7;
}

message TopicRecommendation {
  string topic = 1;
  string priority = 2;
  string reason = 3;
  double difficulty = 4;
  int32 estimated_time_hours = 5;
}

message StudyPlan {
  int32 daily_minutes = 1;
  map<string, int32> weekly_schedule = 2;
  repeated string session_types = 3;
  int32 review_frequency_days = 4;
  int32 test_frequency_days = 5;
}

message LearningMilestone {
  string id = 1;
  string title = 2;
  string description = 3;
  double target_accuracy = 4;
  repeated string required_topics = 5;
  google.protobuf.Timestamp estimated_date = 6;
  bool is_completed = 7;
  google.protobuf.Timestamp completed_at = 8;
}

message OnboardingAnalytics {
  map<string, int32> time_spent_seconds = 1;
  map<string, int32> interaction_count = 2;
  repeated string dropoff_points = 3;
  double completion_rate = 4;
  int32 user_satisfaction = 5;
  string feedback_comments = 6;
}