// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: proto/scheduler.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SchedulerService_GetNextItems_FullMethodName           = "/scheduler.SchedulerService/GetNextItems"
	SchedulerService_GetPlacementItems_FullMethodName      = "/scheduler.SchedulerService/GetPlacementItems"
	SchedulerService_RecordAttempt_FullMethodName          = "/scheduler.SchedulerService/RecordAttempt"
	SchedulerService_InitializeUser_FullMethodName         = "/scheduler.SchedulerService/InitializeUser"
	SchedulerService_GetUserState_FullMethodName           = "/scheduler.SchedulerService/GetUserState"
	SchedulerService_GetItemDifficulty_FullMethodName      = "/scheduler.SchedulerService/GetItemDifficulty"
	SchedulerService_GetTopicMastery_FullMethodName        = "/scheduler.SchedulerService/GetTopicMastery"
	SchedulerService_SelectSessionStrategy_FullMethodName  = "/scheduler.SchedulerService/SelectSessionStrategy"
	SchedulerService_UpdateSessionReward_FullMethodName    = "/scheduler.SchedulerService/UpdateSessionReward"
	SchedulerService_GetBanditMetrics_FullMethodName       = "/scheduler.SchedulerService/GetBanditMetrics"
	SchedulerService_GetAvailableStrategies_FullMethodName = "/scheduler.SchedulerService/GetAvailableStrategies"
	SchedulerService_Health_FullMethodName                 = "/scheduler.SchedulerService/Health"
)

// SchedulerServiceClient is the client API for SchedulerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulerServiceClient interface {
	// Get next items for a user session
	GetNextItems(ctx context.Context, in *NextItemsRequest, opts ...grpc.CallOption) (*NextItemsResponse, error)
	// Get placement test items for new users
	GetPlacementItems(ctx context.Context, in *PlacementRequest, opts ...grpc.CallOption) (*PlacementResponse, error)
	// Record an attempt and update user state
	RecordAttempt(ctx context.Context, in *AttemptRequest, opts ...grpc.CallOption) (*AttemptResponse, error)
	// Initialize a new user's scheduler state
	InitializeUser(ctx context.Context, in *InitializeUserRequest, opts ...grpc.CallOption) (*InitializeUserResponse, error)
	// Get user's current scheduler state
	GetUserState(ctx context.Context, in *GetUserStateRequest, opts ...grpc.CallOption) (*GetUserStateResponse, error)
	// Get item difficulty parameters
	GetItemDifficulty(ctx context.Context, in *GetItemDifficultyRequest, opts ...grpc.CallOption) (*GetItemDifficultyResponse, error)
	// Get topic mastery for a user
	GetTopicMastery(ctx context.Context, in *GetTopicMasteryRequest, opts ...grpc.CallOption) (*GetTopicMasteryResponse, error)
	// Contextual bandit methods for strategy selection
	SelectSessionStrategy(ctx context.Context, in *SelectSessionStrategyRequest, opts ...grpc.CallOption) (*SelectSessionStrategyResponse, error)
	// Update session reward for bandit learning
	UpdateSessionReward(ctx context.Context, in *UpdateSessionRewardRequest, opts ...grpc.CallOption) (*UpdateSessionRewardResponse, error)
	// Get bandit performance metrics
	GetBanditMetrics(ctx context.Context, in *GetBanditMetricsRequest, opts ...grpc.CallOption) (*GetBanditMetricsResponse, error)
	// Get available session strategies
	GetAvailableStrategies(ctx context.Context, in *GetAvailableStrategiesRequest, opts ...grpc.CallOption) (*GetAvailableStrategiesResponse, error)
	// Health check
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type schedulerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerServiceClient(cc grpc.ClientConnInterface) SchedulerServiceClient {
	return &schedulerServiceClient{cc}
}

func (c *schedulerServiceClient) GetNextItems(ctx context.Context, in *NextItemsRequest, opts ...grpc.CallOption) (*NextItemsResponse, error) {
	out := new(NextItemsResponse)
	err := c.cc.Invoke(ctx, SchedulerService_GetNextItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) GetPlacementItems(ctx context.Context, in *PlacementRequest, opts ...grpc.CallOption) (*PlacementResponse, error) {
	out := new(PlacementResponse)
	err := c.cc.Invoke(ctx, SchedulerService_GetPlacementItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) RecordAttempt(ctx context.Context, in *AttemptRequest, opts ...grpc.CallOption) (*AttemptResponse, error) {
	out := new(AttemptResponse)
	err := c.cc.Invoke(ctx, SchedulerService_RecordAttempt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) InitializeUser(ctx context.Context, in *InitializeUserRequest, opts ...grpc.CallOption) (*InitializeUserResponse, error) {
	out := new(InitializeUserResponse)
	err := c.cc.Invoke(ctx, SchedulerService_InitializeUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) GetUserState(ctx context.Context, in *GetUserStateRequest, opts ...grpc.CallOption) (*GetUserStateResponse, error) {
	out := new(GetUserStateResponse)
	err := c.cc.Invoke(ctx, SchedulerService_GetUserState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) GetItemDifficulty(ctx context.Context, in *GetItemDifficultyRequest, opts ...grpc.CallOption) (*GetItemDifficultyResponse, error) {
	out := new(GetItemDifficultyResponse)
	err := c.cc.Invoke(ctx, SchedulerService_GetItemDifficulty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) GetTopicMastery(ctx context.Context, in *GetTopicMasteryRequest, opts ...grpc.CallOption) (*GetTopicMasteryResponse, error) {
	out := new(GetTopicMasteryResponse)
	err := c.cc.Invoke(ctx, SchedulerService_GetTopicMastery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) SelectSessionStrategy(ctx context.Context, in *SelectSessionStrategyRequest, opts ...grpc.CallOption) (*SelectSessionStrategyResponse, error) {
	out := new(SelectSessionStrategyResponse)
	err := c.cc.Invoke(ctx, SchedulerService_SelectSessionStrategy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) UpdateSessionReward(ctx context.Context, in *UpdateSessionRewardRequest, opts ...grpc.CallOption) (*UpdateSessionRewardResponse, error) {
	out := new(UpdateSessionRewardResponse)
	err := c.cc.Invoke(ctx, SchedulerService_UpdateSessionReward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) GetBanditMetrics(ctx context.Context, in *GetBanditMetricsRequest, opts ...grpc.CallOption) (*GetBanditMetricsResponse, error) {
	out := new(GetBanditMetricsResponse)
	err := c.cc.Invoke(ctx, SchedulerService_GetBanditMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) GetAvailableStrategies(ctx context.Context, in *GetAvailableStrategiesRequest, opts ...grpc.CallOption) (*GetAvailableStrategiesResponse, error) {
	out := new(GetAvailableStrategiesResponse)
	err := c.cc.Invoke(ctx, SchedulerService_GetAvailableStrategies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, SchedulerService_Health_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServiceServer is the server API for SchedulerService service.
// All implementations must embed UnimplementedSchedulerServiceServer
// for forward compatibility
type SchedulerServiceServer interface {
	// Get next items for a user session
	GetNextItems(context.Context, *NextItemsRequest) (*NextItemsResponse, error)
	// Get placement test items for new users
	GetPlacementItems(context.Context, *PlacementRequest) (*PlacementResponse, error)
	// Record an attempt and update user state
	RecordAttempt(context.Context, *AttemptRequest) (*AttemptResponse, error)
	// Initialize a new user's scheduler state
	InitializeUser(context.Context, *InitializeUserRequest) (*InitializeUserResponse, error)
	// Get user's current scheduler state
	GetUserState(context.Context, *GetUserStateRequest) (*GetUserStateResponse, error)
	// Get item difficulty parameters
	GetItemDifficulty(context.Context, *GetItemDifficultyRequest) (*GetItemDifficultyResponse, error)
	// Get topic mastery for a user
	GetTopicMastery(context.Context, *GetTopicMasteryRequest) (*GetTopicMasteryResponse, error)
	// Contextual bandit methods for strategy selection
	SelectSessionStrategy(context.Context, *SelectSessionStrategyRequest) (*SelectSessionStrategyResponse, error)
	// Update session reward for bandit learning
	UpdateSessionReward(context.Context, *UpdateSessionRewardRequest) (*UpdateSessionRewardResponse, error)
	// Get bandit performance metrics
	GetBanditMetrics(context.Context, *GetBanditMetricsRequest) (*GetBanditMetricsResponse, error)
	// Get available session strategies
	GetAvailableStrategies(context.Context, *GetAvailableStrategiesRequest) (*GetAvailableStrategiesResponse, error)
	// Health check
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedSchedulerServiceServer()
}

// UnimplementedSchedulerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSchedulerServiceServer struct {
}

func (UnimplementedSchedulerServiceServer) GetNextItems(context.Context, *NextItemsRequest) (*NextItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextItems not implemented")
}

func (UnimplementedSchedulerServiceServer) GetPlacementItems(context.Context, *PlacementRequest) (*PlacementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlacementItems not implemented")
}

func (UnimplementedSchedulerServiceServer) RecordAttempt(context.Context, *AttemptRequest) (*AttemptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordAttempt not implemented")
}

func (UnimplementedSchedulerServiceServer) InitializeUser(context.Context, *InitializeUserRequest) (*InitializeUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeUser not implemented")
}

func (UnimplementedSchedulerServiceServer) GetUserState(context.Context, *GetUserStateRequest) (*GetUserStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserState not implemented")
}

func (UnimplementedSchedulerServiceServer) GetItemDifficulty(context.Context, *GetItemDifficultyRequest) (*GetItemDifficultyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemDifficulty not implemented")
}

func (UnimplementedSchedulerServiceServer) GetTopicMastery(context.Context, *GetTopicMasteryRequest) (*GetTopicMasteryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicMastery not implemented")
}

func (UnimplementedSchedulerServiceServer) SelectSessionStrategy(context.Context, *SelectSessionStrategyRequest) (*SelectSessionStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectSessionStrategy not implemented")
}

func (UnimplementedSchedulerServiceServer) UpdateSessionReward(context.Context, *UpdateSessionRewardRequest) (*UpdateSessionRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSessionReward not implemented")
}

func (UnimplementedSchedulerServiceServer) GetBanditMetrics(context.Context, *GetBanditMetricsRequest) (*GetBanditMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanditMetrics not implemented")
}

func (UnimplementedSchedulerServiceServer) GetAvailableStrategies(context.Context, *GetAvailableStrategiesRequest) (*GetAvailableStrategiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableStrategies not implemented")
}

func (UnimplementedSchedulerServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedSchedulerServiceServer) mustEmbedUnimplementedSchedulerServiceServer() {}

// UnsafeSchedulerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerServiceServer will
// result in compilation errors.
type UnsafeSchedulerServiceServer interface {
	mustEmbedUnimplementedSchedulerServiceServer()
}

func RegisterSchedulerServiceServer(s grpc.ServiceRegistrar, srv SchedulerServiceServer) {
	s.RegisterService(&SchedulerService_ServiceDesc, srv)
}

func _SchedulerService_GetNextItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).GetNextItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulerService_GetNextItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).GetNextItems(ctx, req.(*NextItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Additional handler functions would be here for each method...

// SchedulerService_ServiceDesc is the grpc.ServiceDesc for SchedulerService service.
var SchedulerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.SchedulerService",
	HandlerType: (*SchedulerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNextItems",
			Handler:    _SchedulerService_GetNextItems_Handler,
		},
		// Additional method descriptors would be here...
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/scheduler.proto",
}
