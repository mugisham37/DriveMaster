generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum AccountStatus {
  ACTIVE
  SUSPENDED
  PENDING_VERIFICATION
  DEACTIVATED
}

enum DeviceType {
  IOS
  ANDROID
  WEB
}

model User {
  id                String        @id @default(cuid())
  email             String        @unique
  password          String
  role              UserRole      @default(STUDENT)
  status            AccountStatus @default(PENDING_VERIFICATION)
  emailVerified     Boolean       @default(false)
  emailVerifyToken  String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  lastLoginAt       DateTime?
  loginAttempts     Int           @default(0)
  lockedUntil       DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relations
  profile           Profile?
  sessions          Session[]
  socialConnections SocialConnection[]
  friendships       Friendship[]  @relation("UserFriendships")
  friendOf          Friendship[]  @relation("FriendOf")
  achievements      UserAchievement[]
  streakData        StreakData?
  devices           UserDevice[]
  
  @@index([email])
  @@index([status])
  @@index([lastLoginAt])
}

model Profile {
  id                String   @id @default(cuid())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String   @unique
  displayName       String?
  firstName         String?
  lastName          String?
  avatar            String?
  timezone          String   @default("UTC")
  locale            String   @default("en-US")
  
  // Learning preferences and cognitive patterns (JSONB)
  cognitiveProfile  Json     @default("{}")
  preferences       Json     @default("{}")
  
  // Study patterns
  preferredStudyTime String?  // morning, afternoon, evening
  studyGoal         Int?      // minutes per day
  
  // Privacy settings
  privacySettings   Json     @default("{}")
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([userId])
}

model Session {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  token       String   @unique
  refreshToken String? @unique
  deviceInfo  Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  lastUsedAt  DateTime @default(now())
  
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model SocialConnection {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  provider    String   // google, facebook, apple, etc.
  providerId  String
  email       String?
  name        String?
  avatar      String?
  accessToken String?
  refreshToken String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([provider, providerId])
  @@index([userId])
}

model Friendship {
  id        String   @id @default(cuid())
  user      User     @relation("UserFriendships", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  friend    User     @relation("FriendOf", fields: [friendId], references: [id], onDelete: Cascade)
  friendId  String
  status    String   // PENDING, ACCEPTED, BLOCKED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
  @@index([status])
}

model Achievement {
  id          String   @id @default(cuid())
  key         String   @unique // unique identifier like "first_perfect_score"
  name        String
  description String
  icon        String?
  category    String   // "progress", "social", "consistency", "mastery"
  points      Int      @default(0)
  rarity      String   @default("common") // common, rare, epic, legendary
  conditions  Json     // criteria for earning
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  users       UserAchievement[]
  
  @@index([category])
  @@index([isActive])
}

model UserAchievement {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  achievementId String
  unlockedAt    DateTime    @default(now())
  
  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
  @@index([unlockedAt])
}

model StreakData {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String   @unique
  currentStreak   Int      @default(0)
  longestStreak   Int      @default(0)
  lastStudyDate   DateTime?
  streakFreezes   Int      @default(0)
  totalStudyDays  Int      @default(0)
  lastFreezeUsed  DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([userId])
}

model UserDevice {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  deviceType   DeviceType
  deviceId     String     // unique device identifier
  deviceName   String?    // user-friendly name
  pushToken    String?    // FCM/APNs token
  isActive     Boolean    @default(true)
  lastUsedAt   DateTime   @default(now())
  createdAt    DateTime   @default(now())
  
  @@unique([userId, deviceId])
  @@index([userId])
  @@index([pushToken])
}

// Audit log for security and compliance
model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String   // LOGIN, LOGOUT, PASSWORD_CHANGE, etc.
  resource   String?  // resource affected
  details    Json?    // additional context
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())
  
  @@index([userId])
  @@index([action])
  @@index([timestamp])
}
