version: "3.8"

services:
  # Infrastructure Services
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: adaptive_learning
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_secure_password_2024!
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db-enhanced.sql:/docker-entrypoint-initdb.d/01-init-db-enhanced.sql
      - ./scripts/db-setup/01-create-users.sql:/docker-entrypoint-initdb.d/02-create-users.sql
      - ./scripts/db-setup/02-connection-pooling.sql:/docker-entrypoint-initdb.d/03-connection-pooling.sql
      - ./scripts/db-setup/03-backup-recovery.sql:/docker-entrypoint-initdb.d/04-backup-recovery.sql
      - ./scripts/db-config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./scripts/db-config/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - postgres_backups:/var/lib/postgresql/backups
      - postgres_archive:/var/lib/postgresql/archive
    command:
      [
        "postgres",
        "-c",
        "config_file=/etc/postgresql/postgresql.conf",
        "-c",
        "hba_file=/etc/postgresql/pg_hba.conf",
      ]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d adaptive_learning"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cluster (for production use scripts/redis-cluster/docker-compose.redis-cluster.yml)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./scripts/redis-cluster/redis-single.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_dev_password_2024!", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics",
          "--bootstrap-server",
          "localhost:9092",
          "--list",
        ]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend Services
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgresql://app_user:app_secure_password_2024!@postgres:5432/adaptive_learning
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-jwt-secret-key
      - JWT_EXPIRES_IN=15m
      - REFRESH_TOKEN_EXPIRES_IN=7d
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/auth-service:/app
      - /app/node_modules
    command: npm run start:dev

  content-service:
    build:
      context: ./services/content-service
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - DATABASE_URL=postgresql://app_user:app_secure_password_2024!@postgres:5432/adaptive_learning
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./services/content-service:/app
      - /app/node_modules
    command: npm run start:dev

  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    ports:
      - "50051:50051"
      - "8081:8081"
    environment:
      - GO_ENV=development
      - PORT=50051
      - HTTP_PORT=8081
      - DATABASE_URL=postgresql://app_user:app_secure_password_2024!@postgres:5432/adaptive_learning
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./services/user-service:/app
    working_dir: /app
    command: go run main.go

  scheduler-service:
    build:
      context: ./services/scheduler-service
      dockerfile: Dockerfile
    ports:
      - "50052:50052"
      - "8082:8082"
    environment:
      - GO_ENV=development
      - PORT=50052
      - HTTP_PORT=8082
      - DATABASE_URL=postgresql://app_user:app_secure_password_2024!@postgres:5432/adaptive_learning
      - REDIS_URL=redis://redis:6379
      - ML_SERVICE_URL=http://ml-service:8000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/scheduler-service:/app
    working_dir: /app
    command: go run main.go

  event-service:
    build:
      context: ./services/event-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      - GO_ENV=development
      - PORT=8083
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./services/event-service:/app
    working_dir: /app
    command: go run main.go

  ml-service:
    build:
      context: ./services/ml-service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - PORT=8000
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://readonly_user:readonly_secure_password_2024!@postgres:5432/adaptive_learning
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./services/ml-service:/app
    command: python main.py

  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./services/notification-service:/app
      - /app/node_modules
    command: npm run start:dev

  fraud-service:
    build:
      context: ./services/fraud-service
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    environment:
      - ENVIRONMENT=development
      - PORT=8004
      - DATABASE_URL=postgresql://readonly_user:readonly_secure_password_2024!@postgres:5432/adaptive_learning
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./services/fraud-service:/app
    command: python main.py

  # Frontend Applications
  web-app:
    build:
      context: ./apps/web-app
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3001
    volumes:
      - ./apps/web-app:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev

volumes:
  postgres_data:
  postgres_backups:
  postgres_archive:
  redis_data:

networks:
  default:
    name: adaptive-learning-network
